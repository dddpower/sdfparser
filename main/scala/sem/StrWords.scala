package sem

object ScalaWords {
  
  val TO_Cond = "?"

  val BO_Mul = "*"
  val BO_Div = "/"
  val BO_Rem = "%"
  val BO_Add = "+"
  val BO_Sub = "-"
  val BO_Shl = "<<"
  val BO_Shr = ">>"
  val BO_LT = "<"
  val BO_GT = ">"
  val BO_LE = "<="
  val BO_GE = ">="
  val BO_EQ = "=="
  val BO_NE = "!="
  val BO_LogicAnd = "&&"
  val BO_LogicOr = "||"
  val BO_BitAnd = "&"
  val BO_BitOr = "|"
  val BO_BitXor = "^"
  val BO_Assign = "="
  val BO_MulAssign = "*="
  val BO_DivAssign = "/="
  val BO_RemAssign = "%="
  val BO_AddAssign = "+="
  val BO_SubAssign = "-="
  val BO_ShlAssign = "<<="
  val BO_ShrAssign = ">>="
  val BO_AndAssign = "&="
  val BO_OrAssign = "|="
  val BO_XorAssign = "^="

  val UO_PreInc = "++"
  val UO_PreDec = "--"
  val UO_PostInc = "++"
  val UO_PostDec = "--"
  val UO_Plus = "+"
  val UO_Minus = "-"
  val UO_BitNot = "~"
  val UO_LogicNot = "!"
  
  val dot = "."
  val arrow = "â†’"
  val column = ":"
  val comma = ","
  val semicol = ";"
  val lparen = "("
  val rparen = ")"
  val lbrace = "{"
  val rbrace = "}"
  val lbracket = "["
  val rbracket = "]"
  val _filter = "filter" 
  val _pipeline = "pipeline"
  val _splitjoin =  "splitjoin"
  val _feedback = "feedbackloop"
  val _stateful = "stateful"
  val _split = "split" 
  val _duplicate = "duplicate"
  val _roundrobin = "roundrobin"
  val _add = "add"
  val _body = "body"
  val _loop = "loop"
  val _iter = "iter"
  val _enqueue = "enqueue"
  val _void = "void"
  val _int = "int"
  val _float = "float"
  val _complex = "complex"
  val _double = "double"
  val _bit = "bit"
  val _boolean = "boolean"
  val _portal = "portal"
  val _init = "init"
  val _prework = "prework"
  val _work = "work"
  val _push = "push"
  val _pop = "pop"
  val _peek = "peek"
  val _join = "join"
  val _for = "for"
  val _if = "if"
  val _else = "else"
  val _else_if = "else if"
  val _while = "while"
  val _do = "do"
  val _return = "return"
  val _handler = "handler"
  val _continue = "continue"
  val _break="break"
  val _to = "to"
  val _struct = "struct"
  val _native = "native"
  val _helper = "helper"
  val _static = "static"
  val _var = "var"
  val space = " "
  val newline = "\n"
  val _def = "def"
}